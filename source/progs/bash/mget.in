#! /usr/bin/env bash
##########################################################################
##									##
##	mget is automatically generated,				##
##		please do not modify!					##
##									##
##########################################################################

##########################################################################
##									##
## Script ID: mget							##
## Author: Mark Grant							##
##									##
## Purpose:								##
## Retrieves one or more files whose URL's are specified in a text file.##
##                                                              	##
## Syntax:      mget [OPTIONS]						##
##			[OPTIONS] are:-					##
##	-g or --group group - Save target file with 'group' owner.	##
##	-h or --help Displays usage information.			##
##	-o or --owner owner - Save target file with 'owner' owner.	##
##	-p or --persist Saves command line options for future use.	##
##	-q or --quiet Quiet mode, limited output.			##
##	-s or --silent Silent mode, no output.				##
##	-S or --sourcefile sourcefile Name of the file containing the	##
##		URL's of files to be fetched.				##
##	-T or --targetdir targetdir Directory in which to store		##
##		retieved files.						##
##	-u or --unix Use Unix LF instead of Windows CR/LF line endings.	##
##	-v or --verbose Verbose mode.					##
##	-V or --version Displays version information.			##
##	-w or --windows Use Windows CR/LF instead of Unix LF line	##
##		endings.						##
##									##
## Exit Codes:	0 & 64 - 113 as per C/C++ standard			##
##		0 - success						##
##		64 - Invalid arguments					##
##		66 - File access error					##
##		67 - trap received					##
##		77 - Permissions error					##
##									##
##########################################################################

##########################################################################
##									##
## Changelog								##
##									##
## Date		Author	Version	Description				##
##									##
## 29/04/2013	MG	1.0.1	Created.Does not implement mail		##
##				notification.				##
## 30/04/2013	MG	1.0.2	Corrected Error status section on man	##
##				page. Introduced sed processing on	##
##				source file to ensure it has Unix type	##
##				line endings. Removed part implemented	##
##				'MailTo' option.			##
## 02/05/2013	MG	1.0.3	Introduce -q option to enable use of	##
##				fetch or wget quiet mode.		##
## 03/05/2013	MG	1.0.4	Included source and target information	##
##				in script output to be more useful.	##
## 05/05/2013	MG	1.0.5	Fixed ugly exit if 'sourcefile' = "" or	##
##				'targetdir' = "". 'targetdir' is now	##
##				defaulted to 'PWD'.			##
## 22/08/2013	MG	1.0.6	Debian best practice documentation	##
##				requires that programs placed in the	##
##				PATH should not have extensions as the	##
##				programs may be rewritten in a		##
##				different language. This would then	##
##				require a name change, or, if left	##
##				as-is would cause confusion. So name	##
##				changed to remove .sh extension.	##
## 13/12/2013	MG	1.0.7	Changed stdout & stderr message output	##
##				to use a function directing to one or	##
##				other based on a status.		##
## 14/12/2013	MG	1.0.8	Changed so that output function is the	##
##				only place to insert the program name	##
##				and it uses $0.				##
## 15/12/2013	MG	1.0.9	Use command name instead of $0.		##
## 01/01/2014	MG	1.0.10	Tidied up use of output function.	##
## 05/01/2014	MG	1.0.11	Introduced new standardised error	##
##				handler routine to test previous	##
##				command success.			##
##				Changed command line options to use -V	##
##				as the version option, S as Source URL	##
##				and -T as target directory. Introduced	##
##				-q, -s & -v as quiet, silent and	##
##				verbose	options. Fixed error handling	##
##				on existing file deletion.		##
## 06/01/2014	MG	1.0.12	Persist option code was in the file	##
##				processing loop and never got		##
##				executed if no files were to be		##
##				processed. Moved out of loop.		##
## 27/08/2014	MG	1.0.13	Change name to mget to avoid package	##
##				name duplication in Ubuntu.		##
## 03/09/2014	MG	1.1.1	Change to utilise configure.ac's check	##
##				on whether wget or fetch is in use.	##
##				Change to use awk script to convert to	##
##				and from Windows / Unix text file line	##
##				endings to ensure the existing ending 	##
##				is tested to determine if conversion is	##
##				required.				##
## 28/11/2014	MG	1.1.2	Switch to use GNU getopt to enable long	##
##				options.				##
## 28/11/2014	MG	1.1.3	Add overall package version to -V.	##
## 01/12/2014	MG	1.1.4	Replaced windows line ending conversion	##
##				code wuth use of wutconv.		##
## 01/12/2014	MG	1.1.5	Allow mget to retrieve specified file	##
##				with no line ending conversion as	##
##				default. Add --unix option as complement##
##				to --windows option.			##
## 26/06/2015	MG	1.1.6	Remove BSD support.			##
##									##
##########################################################################


####################
## Init variables ##
####################
script_exit_code=0
version="1.1.6"				# set version variable
etclocation=@sysconfdir@		# Path to etc directory
outputprefix="mget: "
packageversion=@pkgversion@		# Version of the complete package

conffile=".mget"
ownergroup=FALSE
owner=FALSE
persist=FALSE
sourcefile=""
targetdir=""

# wget defaults to verbose so make non-verbose default here.
verbosity="-nv"
windows=FALSE
unix=FALSE

###############
## Functions ##
###############

# Output $1 to stdout or stderr depending on $2
output()
{
	if [ $2 = 0 ]
	then
		echo "$outputprefix$1"
	else
		echo "$outputprefix$1" 1>&2
	fi
}

# Standard function to test command error ($1 is $?) and exit if non-zero
std_cmd_err_handler()
{
	if [ $1 != 0 ]
	then
		script_exit_code=$1
		script_exit
	fi
}

# Standard function to tidy up and return exit code
script_exit()
{
	exit $script_exit_code
}

# Standard trap exit function
trap_exit()
{
script_exit_code=67
output "Script terminating due to trap received. Code: "$script_exit_code 1
script_exit
}

# Setup trap
trap trap_exit SIGHUP SIGINT SIGTERM

# Function to write config file.
write_file()
{
	echo "sourcefile=$sourcefile">>~/.mget
	echo "targetdir=$targetdir">>~/.mget
}

##########
## Main ##
##########
# If config file exists, read it, else, create it.
if [ ! -f ~/$conffile ]
then
	write_file
else
	IFS="="
	exec 3<~/$conffile
	while read -u3 -ra input
	do
		case ${input[0]} in
		sourcefile)
			sourcefile=${input[1]}
			;;
		targetdir)
			targetdir=${input[1]}
			;;
		esac
	done
	exec 3<&-
fi

# Process command line arguments with GNU getopt.
GETOPTTEMP=`getopt -o g:ho:pqsS:T:uvVw \
--long group:,help,owner:,persist,quiet,silent,sourcefile:,targetdir:,unix,verbose,version,windows \
-n "$0" -- "$@"`
std_cmd_err_handler $?

eval set -- "$GETOPTTEMP"
std_cmd_err_handler $?

while true
do
	case "$1" in
	-g|--group)
		ownergroup=TRUE
		newownergroup=$2
		shift 2
		;;
	-h|--help)
		echo "Usage is $0 [OPTIONS]"
		echo "	[OPTIONS] are:-"
		echo "	'-g or --group group' Save target file with 'group' owner."
		echo "	'-h or --help' Displays usage information."
		echo "	'-o or --owner owner' Save target file with 'owner' owner."
		echo "	'-p or --persist' Saves command line options for future use."
		echo "	'-q or --quiet' Quiet mode, limited output."
		echo "	'-s or --silent' Silent mode, no output."
		echo "	'-S or --sourcefile sourcefile' Name of file containing source URL's."
		echo "		Can be persisted with -p."
		echo "	'-T or --targetdir targetdir' Name of directory for storing retrieved files."
		echo "		Can be persisted with -p."
		echo "	'-u or --unix' Use Unix LF line endings instead of Windows CR/LF line endings."
		echo "	'-v or --verbose' Verbose mode."
		echo "	'-V or --version' Displays version information."
		echo "	'-w or --windows' Use Windows CR/LF line endings instead of Unix LF line endings."
		shift
		script_exit_code=0
		script_exit
		;;
	-o|--owner)
		owner=TRUE
		newowner=$2
		shift 2
		;;
	-p|--persist)
		persist=TRUE
		shift
		;;
	-q|--quiet)
		verbosity="-q"
		shift
		;;
	-s|--silent)
		verbosity=""
		exec 1>/dev/null 2>/dev/null
		shift
		;;
	-S|--sourcefile)
		sourcefile=$2
		shift 2
		;;
	-T|--targetdir)
		targetdir=$2
		shift 2
		;;
	-u|--unix)
		unix=TRUE
		shift
		;;
	-v|--verbose)
		verbosity="-v"
		shift
		;;
	-V|--version)
		echo "$0 Script version "$version
		echo "$0 Package version "$packageversion
		shift
		script_exit_code=0
		script_exit
		;;
	-w|--windows)
		windows=TRUE
		shift
		;;
	--)	shift
		break
		;;
	*)	script_exit_code=1
		output "Internal error." 1
		script_exit
		;;
	esac
done

# Script does not accept other arguments.
if [ $# -gt 0 ]
then
	script_exit_code=64
	output "Invalid argument." 1
	script_exit
fi

# If only persist flag set then nothing to do, exit.
if [ $# = 1 -a "$1" = "-p" ]
then
	script_exit_code=0
	script_exit
fi

# u and w flag cannot both be set.
if [ $windows = TRUE -a $unix = TRUE ]
then
	script_exit_code=64
	output "-u and -w cannot both be set." 1
	script_exit
fi

# Check source file exists and is readable.
if [ ! -f "$sourcefile" ]
then
	script_exit_code=66
	output "Source file not valid." 1
	script_exit
fi

if [ ! -r "$sourcefile" ]
then
	script_exit_code=77
	output "Source file not accessible." 1
	script_exit
fi

# Now ensure source file is in Unix text format.
wutconv --unix $sourcefile
std_cmd_err_handler $?

# Check target directory exists and is writable.
if [ "$targetdir" = "" ]
then
	targetdir=$PWD
fi

if [ ! -d "$targetdir" ]
then
	script_exit_code=66
	output "Target directory not valid." 1
	script_exit
fi

if [ ! -w "$targetdir" ]
then
	script_exit_code=77
	output "Target directory not accessible." 1
	script_exit
fi

# Now get the files
IFS="/"
exec 3<"$sourcefile"
while read -u3 -ra input
do
	outputfile=${input[${#input[*]}-1]}
	output "Attempting to get file - ""${input[*]}" 0
	output "Attempting to save file to - ""$targetdir/$outputfile" 0

	wget $verbosity --no-check-certificate -O "$targetdir/$outputfile" "${input[*]}"
	status=$?
	
	output "File get completed with status "$status $status
	((script_exit_code = script_exit_code + status))
	
	if [ $script_exit_code = 0 ]
	then
		# If Windows CR/LF line ending required, convert.
		if [ $windows = TRUE ]
		then
			wutconv --windows --verbose "$targetdir/$outputfile"
			status=$?
			((script_exit_code = script_exit_code + status))
		fi
		# If Unix LF line ending required, convert.
		if [ $unix = TRUE ]
		then
			wutconv --unix --verbose "$targetdir/$outputfile"
			status=$?
			((script_exit_code = script_exit_code + status))
		fi
		# Change owner?
		if [ $owner = TRUE ]
		then
			chown $newowner "$targetdir/$outputfile"
			status=$?
			output "Owner change complete with status "$status $status
			((script_exit_code = script_exit_code + status))
		fi
		#Change group?
		if [ $ownergroup = TRUE ]
		then
			chown :$newownergroup "$targetdir/$outputfile"
			status=$?
			output "Owner group change complete with status "$status $status
			((script_exit_code = script_exit_code + status))
		fi
	fi
done
exec 3<&-

# If persist is TRUE, save parameters.
if [ $persist = TRUE ]
then
	rm -f ~/$conffile
	write_file
fi

# And exit
output "Script complete with exit code: "$script_exit_code $script_exit_code
script_exit
